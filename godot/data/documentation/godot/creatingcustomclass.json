{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This article focuses on the tools at your disposal and the requirements to make a subclass of a Godot class."}]},{"anchor":"Define-the-class","level":3,"type":"heading","text":"Define the class"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A custom Godot class must meet the following requirements. It must be:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"a subclass of a Godot class (therefore a subclass of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/Object"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"public or open"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"marked with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/Exposable()"},{"type":"text","text":" macro"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is an example of a class correctly defined:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ The class `Character` can be exposed","@Exposable public class Character: Node {","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once a class is correctly defined, it can be exposed to Godot through a bridge. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/CreatingGodotBridge"},{"type":"text","text":" to learn how to setup a bridge."}]},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Do not use a custom Godot class not marked with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/Exposable()"},{"type":"text","text":" macro."}]}],"type":"aside","name":"Warning"},{"anchor":"Expose-members","level":3,"type":"heading","text":"Expose members"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every public member defined inside the class are exposed to Godot and must meet a few strict requirements."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Defining public members in an extension wonâ€™t be covered by the macro. So use extensions to publicly expose members that cannot be exposed to Godot."}]}],"type":"aside","name":"Tip"},{"anchor":"Expose-variables","level":4,"type":"heading","text":"Expose variables"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every public or open variable is exposed to Godot. All these variables must be of a type conforming to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/VariantConvertible"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"Only "},{"type":"emphasis","inlineContent":[{"type":"text","text":"basic"}]},{"type":"text","text":" variables can be exposed (no async etc.), and their type must be explicitly defined:"}]},{"type":"codeListing","syntax":"swift","code":["@Exposable public class Character: Node {","    \/\/ The variable `speed` is exposed as { get set }","    public var speed: Double = 10.0","","    \/\/ The variable `favorite_number` is exposed as { get }","    public var favoriteNumber: Int {","        return 20","    }","","    \/\/ The variable `jump_direction` is exposed as { get }","    public let jumpDirection: Vector2 = .init()","}"]},{"anchor":"Expose-functions","level":4,"type":"heading","text":"Expose functions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every public or open function is exposed to Godot. All these functions must use parameters and return type conforming to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/VariantConvertible"},{"type":"text","text":" protocol."},{"type":"text","text":" "},{"type":"text","text":"Only "},{"type":"emphasis","inlineContent":[{"type":"text","text":"basic"}]},{"type":"text","text":" functions can be exposed (no "},{"type":"codeVoice","code":"async"},{"type":"text","text":", "},{"type":"codeVoice","code":"throws"},{"type":"text","text":", generic etc.)."}]},{"type":"codeListing","syntax":"swift","code":["@Exposable public class Character: Node {","    \/\/ The function `sleep` is exposed","    public func sleep() -> Bool {","        return true","    }","","    \/\/ The function `super_jump` is exposed with","    \/\/ one parameter `direction`","    public func superJump(to direction: Vector2) {","        gdPrint(\"SUUUUPER JUMP\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Godot, two functions with the same name but not the same signature cannot coexist in the same class. Be sure to name every exposed function differently."}]},{"anchor":"Expose-enums","level":4,"type":"heading","text":"Expose enums"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every public enum is exposed to Godot. All these enums must be marked "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/GodotEnum()"},{"type":"text","text":". See the corresponding doc for more information."}]},{"type":"codeListing","syntax":"swift","code":["@Exposable public class Character: Node {","    \/\/ The enum `Emotion` is exposed with 3 cases:","    \/\/ CHARACTER_EMOTION_HAPPY","    \/\/ CHARACTER_EMOTION_NOT_SO_HAPPY","    \/\/ CHARACTER_EMOTION_SAD","    @GodotEnum public enum Emotion: Int64 {","        case happy","        case notSoHappy","        case sad","    }","}"]},{"anchor":"Expose-option-sets","level":4,"type":"heading","text":"Expose option sets"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every public option set is exposed to Godot. All these structs must be marked "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/GodotOptionSet()"},{"type":"text","text":". See the corresponding doc for more information."}]},{"type":"codeListing","syntax":"swift","code":["@Exposable public class Character: Node {","    \/\/ The option set `CharacterAction` is exposed with 5 cases:","    \/\/ CHARACTER_ACTION_THINKING","    \/\/ CHARACTER_ACTION_DRAWING","    \/\/ CHARACTER_ACTION_SLEEPING","    \/\/ CHARACTER_ACTION_NONE","    \/\/ CHARACTER_ACTION_DREAMING","    @GodotOptionSet public struct CharacterAction {","        public static let thinking: Self = .init(rawValue: 1 << 0)","        public static let drawing: Self  = .init(rawValue: 1 << 1)","        public static let sleeping: Self = .init(rawValue: 1 << 2)","","        public static let none: CharacterAction = []","        public static let dreaming: CharacterAction = [.thinking, .sleeping]","    }","}"]},{"anchor":"Expose-signals","level":4,"type":"heading","text":"Expose signals"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Signals are created through emitters in Swift."},{"type":"text","text":" "},{"type":"text","text":"Every public emitter is exposed to Godot. All these structs must be marked "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/Emitter(signal:args:)"},{"type":"text","text":". See the corresponding doc for more information."}]},{"type":"codeListing","syntax":"swift","code":["@Exposable public class Character: Node {","    \/\/ The signal `landed_beautifully` is exposed","    @Emitter public struct LandedBeautifully {}","","    \/\/ The signal `jumped` is exposed with","    \/\/ two arguments `force` and `direction`","    @Emitter(args: (\"force\", Double), (\"direction\", Vector3))","    public struct Jumped {}","}"]},{"anchor":"Unexposable-members","level":4,"type":"heading","text":"Unexposable members"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other than the members defined before, no member can be exposed to Godot."},{"type":"text","text":" "},{"type":"text","text":"Do "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" define public members that cannot be exposed to Godot. Place them in extensions instead:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ The class `Character` can be exposed","@Exposable public class Character: Node {","    \/\/ The `eat` function couldn't be exposed to Godot","    \/\/ because it throws","    \/\/ Making it private prevents the exposition","    private func eat(quantity: Double) throws {","        \/\/ ...","    }","}","","public extension Character {","    \/\/ The `sleep` function couldn't be exposed to Godot","    \/\/ because it is async","    \/\/ Placing it in an extension prevents the exposition","    func sleep(for duration: Double) async {","        \/\/ ...","    }","}"]},{"anchor":"Override-the-initializers","level":3,"type":"heading","text":"Override the initializers"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every Godot class come with two required initializers."},{"type":"text","text":" "},{"type":"text","text":"The base one is the one you use when creating new instances. The other one is called by Godot to instantiate your class from Godot."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you decide to override an initializer, you will have to override both:"}]},{"type":"codeListing","syntax":"swift","code":["@Exposable public class Character: Node {","    public required init() {","        super.init()","","        \/\/ Custom initialization","    }","","    \/\/ This init is called when Godot creates","    \/\/ the object and not Swift","    public required init(objectPointer: GodotObjectPointer) {","        super.init(objectPointer: objectPointer)","","        \/\/ Custom initialization","    }","}"]},{"anchor":"Automatic-reference-counting","level":3,"type":"heading","text":"Automatic reference counting"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Godot classes all inherit from the top class "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/Object"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"There is one specific class that is a direct subclass of it: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/RefCounted"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your class is a subclass of "},{"type":"codeVoice","code":"RefCounted"},{"type":"text","text":", the class will behave just like in Swift, using automatic reference counting. The deinit will be called as soon as the object is no longer in use."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Things are different when your class is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" a subclass of "},{"type":"codeVoice","code":"RefCounted"},{"type":"text","text":". When a new object of such a class is instantiated, a reference to the instance is forever persisted. The only way to free the instance is to explicitly request Godot to free its memory."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/godot\/creatingcustomclass"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Godot\/documentation\/Godot\/CreatingCustomClass","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Create a custom class that can be exposed to Godot."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Creating a custom Godot class","role":"article","modules":[{"name":"Godot"}]},"hierarchy":{"paths":[["doc:\/\/Godot\/documentation\/Godot"]]},"seeAlsoSections":[{"title":"Creating custom classes","identifiers":["doc:\/\/Godot\/documentation\/Godot\/Exposable()","doc:\/\/Godot\/documentation\/Godot\/ExposableMember(_:)","doc:\/\/Godot\/documentation\/Godot\/Emitter(signal:args:)","doc:\/\/Godot\/documentation\/Godot\/Receiver()","doc:\/\/Godot\/documentation\/Godot\/GodotEnum()","doc:\/\/Godot\/documentation\/Godot\/GodotOptionSet()"],"generated":true}],"references":{"doc://Godot/documentation/Godot/Receiver()":{"role":"symbol","title":"Receiver()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Receiver"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Converts a Swift function into a Godot signal receiver."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/Receiver()","kind":"symbol","type":"topic","url":"\/documentation\/godot\/receiver()"},"doc://Godot/documentation/Godot/Object":{"role":"symbol","title":"Object","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Object"}],"abstract":[],"identifier":"doc:\/\/Godot\/documentation\/Godot\/Object","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Object"}],"url":"\/documentation\/godot\/object"},"doc://Godot/documentation/Godot/ExposableMember(_:)":{"role":"symbol","title":"ExposableMember(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExposableMember"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Object","preciseIdentifier":"s:5Godot6ObjectC"},{"kind":"text","text":".Type)"}],"abstract":[{"type":"text","text":"Enables a member to be exposed to the Godot editor."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/ExposableMember(_:)","kind":"symbol","type":"topic","url":"\/documentation\/godot\/exposablemember(_:)"},"godot-swift_logo.png":{"alt":"A technology icon representing Godot Swift","type":"image","identifier":"godot-swift_logo.png","variants":[{"url":"\/images\/godot-swift_logo@2x.png","traits":["2x","light"]}]},"doc://Godot/documentation/Godot/CreatingGodotBridge":{"role":"article","title":"Creating a Godot bridge","abstract":[{"type":"text","text":"Make an entry point for your module and initialize it with custom parameters."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/CreatingGodotBridge","kind":"article","type":"topic","url":"\/documentation\/godot\/creatinggodotbridge"},"doc://Godot/documentation/Godot/GodotEnum()":{"role":"symbol","title":"GodotEnum()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"GodotEnum"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Converts a Swift enum into an enum usable by Godot."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/GodotEnum()","kind":"symbol","type":"topic","url":"\/documentation\/godot\/godotenum()"},"doc://Godot/documentation/Godot/GodotOptionSet()":{"role":"symbol","title":"GodotOptionSet()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"GodotOptionSet"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Converts a Swift struct into an option set usable by Godot."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/GodotOptionSet()","kind":"symbol","type":"topic","url":"\/documentation\/godot\/godotoptionset()"},"doc://Godot/documentation/Godot/VariantConvertible":{"role":"symbol","title":"VariantConvertible","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantConvertible"}],"abstract":[{"type":"text","text":"A type that can be converted from, and to, a variant."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/VariantConvertible","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantConvertible"}],"url":"\/documentation\/godot\/variantconvertible"},"doc://Godot/documentation/Godot/Emitter(signal:args:)":{"role":"symbol","title":"Emitter(signal:args:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Emitter"},{"kind":"text","text":"("},{"kind":"externalParam","text":"signal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"args"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"keyword","text":"Any"},{"kind":"text","text":".Type)...)"}],"abstract":[{"type":"text","text":"Converts a Swift struct into a Godot signal."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/Emitter(signal:args:)","kind":"symbol","type":"topic","url":"\/documentation\/godot\/emitter(signal:args:)"},"doc://Godot/documentation/Godot":{"images":[{"type":"icon","identifier":"godot-swift_logo.png"}],"role":"collection","title":"Godot","abstract":[{"type":"text","text":"A library for interacting with Godot using Swift code."}],"identifier":"doc:\/\/Godot\/documentation\/Godot","kind":"symbol","type":"topic","url":"\/documentation\/godot"},"doc://Godot/documentation/Godot/Exposable()":{"role":"symbol","title":"Exposable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Exposable"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Enables a custom Godot class"},{"type":"text","text":" "},{"type":"text","text":"to be exposed to the Godot editor."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/Exposable()","kind":"symbol","type":"topic","url":"\/documentation\/godot\/exposable()"},"doc://Godot/documentation/Godot/RefCounted":{"role":"symbol","title":"RefCounted","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RefCounted"}],"abstract":[],"identifier":"doc:\/\/Godot\/documentation\/Godot\/RefCounted","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RefCounted"}],"url":"\/documentation\/godot\/refcounted"}}}