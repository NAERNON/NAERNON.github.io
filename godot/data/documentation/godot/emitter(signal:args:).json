{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(extension, conformances: "},{"kind":"typeIdentifier","identifier":"doc:\/\/Godot\/documentation\/Godot\/EmitterProtocol","preciseIdentifier":"s:5Godot15EmitterProtocolP","text":"EmitterProtocol"},{"kind":"text","text":") "},{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(peer, names: prefixed(emitter)) "},{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, names: named(SignalInput), named(signalName), named(object), named(init), named(emit)) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Emitter"},{"kind":"text","text":"("},{"kind":"externalParam","text":"signal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"args"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"keyword","text":"Any"},{"kind":"text","text":".Type)...)"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The generated signal will automatically be accessible from the Godot editor."}]},{"anchor":"Naming-convention","level":3,"type":"heading","text":"Naming convention"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The signal name takes the name of the struct, converted to snake case."},{"type":"text","text":" "},{"type":"text","text":"See the example below."}]},{"anchor":"Usage","level":3,"type":"heading","text":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This macro must be applied to an empty struct, inside an exposable Godot class definition."},{"type":"text","text":" "},{"type":"text","text":"For example, the following code converts the struct into a signal:"}]},{"type":"codeListing","syntax":"swift","code":["@Exposable public class Character: Node {","    @Emitter","    public struct LandedBeautifully {}","    \/\/ The signal name is \"landed_beautifully\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A variable named “emitter + structure_name” is also defined alongside the signal, in the Godot class."},{"type":"text","text":" "},{"type":"text","text":"The following code uses this variable to emit a signal:"}]},{"type":"codeListing","syntax":"swift","code":["@Exposable public class Character: Node {","    private func land() {","        emitterLandedBeautifully.emit()","    }","}"]},{"anchor":"Add-arguments-to-the-signal","level":3,"type":"heading","text":"Add arguments to the signal"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A signal can also have arguments."},{"type":"text","text":" "},{"type":"text","text":"To add one or more arguments to a signal, define them in the "},{"type":"codeVoice","code":"@Emitter"},{"type":"text","text":" macro like so:"}]},{"type":"codeListing","syntax":"swift","code":["@Exposable public class Character: Node {","    @Emitter(args: (\"force\", Double), (\"direction\", Vector3))","    public struct Jumped {}","    \/\/ The signal name is \"jumped\"","    \/\/ and it takes two parameters: force and direction","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Emitting the signal becomes:"}]},{"type":"codeListing","syntax":"swift","code":["@Exposable public class Character: Node {","    private func jump() {","        emitterJumped.emit(force: 13.0, direction: .left)","    }","}"]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Only "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/VariantConvertible"},{"type":"text","text":" types may be used as arguments."}]}],"type":"aside","name":"Important"},{"anchor":"Connect-to-a-receiver","level":3,"type":"heading","text":"Connect to a receiver"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Emitters are designed to work with receivers."},{"type":"text","text":" "},{"type":"text","text":"See the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/Receiver()"},{"type":"text","text":" macro to learn how to setup a receiver."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Connect any receiver that has the same input type by calling the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/EmitterProtocol\/connect(_:flags:)"},{"type":"text","text":" method."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/EmitterProtocol\/disconnect(_:)"},{"type":"text","text":" method to disconnect a receiver."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Check that an emitter is connected to a receiver by calling the  "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Godot\/documentation\/Godot\/EmitterProtocol\/isConnected(to:)"},{"type":"text","text":" method."}]},{"type":"codeListing","syntax":"swift","code":["@Exposable public class Character: Node {","    @Emitter","    public struct LandedBeautifully {}","}","","@Exposable public class Grass: Node {","    @Receiver","    public func characterLanded() {}","}","","let character = Character()","let grass = Grass()","","\/\/ The characterLanded receiver will receive any signal","\/\/ emitted by the landedBeautifully emitter.","character.emitterLandedBeautifully.connect(grass.characterLandedReceiver)"]},{"anchor":"Set-a-custom-signal-name","level":3,"type":"heading","text":"Set a custom signal name"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is possible to use a custom signal name."},{"type":"text","text":" "},{"type":"text","text":"Fill the "},{"type":"codeVoice","code":"signal"},{"type":"text","text":" argument of the macro:"}]},{"type":"codeListing","syntax":"swift","code":["@Exposable public class Character: Node {","    @Emitter(signal: \"landed_not_so_beautifully\")","    public struct LandedBeautifully {}","    \/\/ The signal name is \"landed_not_so_beautifully\"","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/godot\/emitter(signal:args:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Godot\/documentation\/Godot\/Emitter(signal:args:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Converts a Swift struct into a Godot signal."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Emitter"},{"kind":"text","text":"("},{"kind":"externalParam","text":"signal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"args"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"keyword","text":"Any"},{"kind":"text","text":".Type)...)"}],"title":"Emitter(signal:args:)","roleHeading":"Macro","role":"symbol","symbolKind":"macro","externalID":"s:5Godot7Emitter6signal4argsys12StaticStringVSg_AF_ypXptdtcfm","modules":[{"name":"Godot"}]},"hierarchy":{"paths":[["doc:\/\/Godot\/documentation\/Godot"]]},"seeAlsoSections":[{"title":"Creating custom classes","identifiers":["doc:\/\/Godot\/documentation\/Godot\/CreatingCustomClass","doc:\/\/Godot\/documentation\/Godot\/Exposable()","doc:\/\/Godot\/documentation\/Godot\/ExposableMember(_:)","doc:\/\/Godot\/documentation\/Godot\/Receiver()","doc:\/\/Godot\/documentation\/Godot\/GodotEnum()","doc:\/\/Godot\/documentation\/Godot\/GodotOptionSet()"],"generated":true}],"references":{"doc://Godot/documentation/Godot/EmitterProtocol/isConnected(to:)":{"role":"symbol","title":"isConnected(to:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"isConnected"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":">("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the reveicer"},{"type":"text","text":" "},{"type":"text","text":"is connected to the receiver."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/EmitterProtocol\/isConnected(to:)","kind":"symbol","type":"topic","url":"\/documentation\/godot\/emitterprotocol\/isconnected(to:)"},"doc://Godot/documentation/Godot/ExposableMember(_:)":{"role":"symbol","title":"ExposableMember(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExposableMember"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Object","preciseIdentifier":"s:5Godot6ObjectC"},{"kind":"text","text":".Type)"}],"abstract":[{"type":"text","text":"Enables a member to be exposed to the Godot editor."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/ExposableMember(_:)","kind":"symbol","type":"topic","url":"\/documentation\/godot\/exposablemember(_:)"},"doc://Godot/documentation/Godot/VariantConvertible":{"role":"symbol","title":"VariantConvertible","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantConvertible"}],"abstract":[{"type":"text","text":"A type that can be converted from, and to, a variant."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/VariantConvertible","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantConvertible"}],"url":"\/documentation\/godot\/variantconvertible"},"doc://Godot/documentation/Godot/CreatingCustomClass":{"role":"article","title":"Creating a custom Godot class","abstract":[{"type":"text","text":"Create a custom class that can be exposed to Godot."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/CreatingCustomClass","kind":"article","type":"topic","url":"\/documentation\/godot\/creatingcustomclass"},"doc://Godot/documentation/Godot/Emitter(signal:args:)":{"role":"symbol","title":"Emitter(signal:args:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Emitter"},{"kind":"text","text":"("},{"kind":"externalParam","text":"signal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"args"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"keyword","text":"Any"},{"kind":"text","text":".Type)...)"}],"abstract":[{"type":"text","text":"Converts a Swift struct into a Godot signal."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/Emitter(signal:args:)","kind":"symbol","type":"topic","url":"\/documentation\/godot\/emitter(signal:args:)"},"doc://Godot/documentation/Godot/EmitterProtocol":{"role":"symbol","title":"EmitterProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmitterProtocol"}],"abstract":[{"type":"text","text":"A type that can connect to a receiver for handling signals."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/EmitterProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EmitterProtocol"}],"url":"\/documentation\/godot\/emitterprotocol"},"doc://Godot/documentation/Godot/Receiver()":{"role":"symbol","title":"Receiver()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Receiver"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Converts a Swift function into a Godot signal receiver."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/Receiver()","kind":"symbol","type":"topic","url":"\/documentation\/godot\/receiver()"},"doc://Godot/documentation/Godot/EmitterProtocol/connect(_:flags:)":{"role":"symbol","title":"connect(_:flags:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Object","preciseIdentifier":"s:5Godot6ObjectC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ConnectFlags","preciseIdentifier":"s:5Godot6ObjectC12ConnectFlagsO"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"ErrorType","preciseIdentifier":"s:5Godot9ErrorTypeO"}],"abstract":[{"type":"text","text":"Connects the given receiver to the receiver."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/EmitterProtocol\/connect(_:flags:)","kind":"symbol","type":"topic","url":"\/documentation\/godot\/emitterprotocol\/connect(_:flags:)"},"doc://Godot/documentation/Godot/GodotOptionSet()":{"role":"symbol","title":"GodotOptionSet()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"GodotOptionSet"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Converts a Swift struct into an option set usable by Godot."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/GodotOptionSet()","kind":"symbol","type":"topic","url":"\/documentation\/godot\/godotoptionset()"},"godot-swift_logo.png":{"alt":"A technology icon representing Godot Swift","type":"image","identifier":"godot-swift_logo.png","variants":[{"url":"\/images\/godot-swift_logo@2x.png","traits":["2x","light"]}]},"doc://Godot/documentation/Godot":{"images":[{"type":"icon","identifier":"godot-swift_logo.png"}],"role":"collection","title":"Godot","abstract":[{"type":"text","text":"A library for interacting with Godot using Swift code."}],"identifier":"doc:\/\/Godot\/documentation\/Godot","kind":"symbol","type":"topic","url":"\/documentation\/godot"},"doc://Godot/documentation/Godot/Exposable()":{"role":"symbol","title":"Exposable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Exposable"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Enables a custom Godot class"},{"type":"text","text":" "},{"type":"text","text":"to be exposed to the Godot editor."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/Exposable()","kind":"symbol","type":"topic","url":"\/documentation\/godot\/exposable()"},"doc://Godot/documentation/Godot/GodotEnum()":{"role":"symbol","title":"GodotEnum()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"GodotEnum"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Converts a Swift enum into an enum usable by Godot."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/GodotEnum()","kind":"symbol","type":"topic","url":"\/documentation\/godot\/godotenum()"},"doc://Godot/documentation/Godot/EmitterProtocol/disconnect(_:)":{"role":"symbol","title":"disconnect(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"disconnect"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Disconnects the given receiver to the receiver."}],"identifier":"doc:\/\/Godot\/documentation\/Godot\/EmitterProtocol\/disconnect(_:)","kind":"symbol","type":"topic","url":"\/documentation\/godot\/emitterprotocol\/disconnect(_:)"}}}